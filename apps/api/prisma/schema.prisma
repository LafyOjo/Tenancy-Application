// Prisma schema defining tenancy application data model
// Business tables include orgId for organization scoping

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  landlord
  property_manager
  tenant
  tradesperson
  admin
}

enum SubscriptionPlan {
  standard
  priority_support
  discounted_repairs
}

model Organization {
  id                 String               @id @default(cuid())
  name               String
  createdAt          DateTime             @default(now())
  logoUrl            String?
  primaryColor       String?
  secondaryColor     String?
  fontFamily         String?
  emailTemplate      String?              @db.Text
  memberships        Membership[]
  properties         Property[]
  apiKeys            ApiKey[]
  plans              Plan[]
  featureFlags       FeatureFlag[]
  auditLogs          AuditLog[]
  Unit               Unit[]
  Household          Household[]
  Lease              Lease[]
  Invoice            Invoice[]
  Payment            Payment[]
  paymentMandates    PaymentMandate[]
  Ticket             Ticket[]
  TicketCategory     TicketCategory[]
  TicketNote         TicketNote[]
  Visit              Visit[]
  UtilityReading     UtilityReading[]
  Deposit            Deposit[]
  Document           Document[]
  Notification       Notification[]
  Certificate        Certificate[]
  Device             Device[]
  LeaseAmendment     LeaseAmendment[]
  Notice             Notice[]
  LedgerEntry        LedgerEntry[]
  LeaseShare         LeaseShare[]
  InvoiceShare       InvoiceShare[]
  SublettingApproval SublettingApproval[]
  AirbnbIntegration  AirbnbIntegration[]
  SublettingPayout   SublettingPayout[]
  SensorEvent        SensorEvent[]
  ServiceJob        ServiceJob[]
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  totpSecret    String?
  totpEnabled   Boolean        @default(false)
  createdAt     DateTime       @default(now())
  memberships   Membership[]
  notifications Notification[]
  auditLogs     AuditLog[]     @relation("ActorLogs")
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Membership {
  id           String         @id @default(cuid())
  org          Organization   @relation(fields: [orgId], references: [id])
  orgId        String
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  role         Role
  createdAt    DateTime       @default(now())
  subscriptionPlan SubscriptionPlan @default(standard)
  households   Household[]    @relation("HouseholdMembers")
  Ticket       Ticket[]
  assignedTickets Ticket[] @relation("TicketAssignedTo")
  TicketNote   TicketNote[]
  LeaseShare   LeaseShare[]
  InvoiceShare InvoiceShare[]
}

model Property {
  id           String        @id @default(cuid())
  org          Organization  @relation(fields: [orgId], references: [id])
  orgId        String
  name         String
  address      String?
  units        Unit[]
  visits       Visit[]
  tickets      Ticket[]
  certificates Certificate[]
  createdAt    DateTime      @default(now())
  imageUrl     String?
  deletedAt    DateTime?
}

model Unit {
  id                  String           @id @default(cuid())
  org                 Organization     @relation(fields: [orgId], references: [id])
  orgId               String
  property            Property         @relation(fields: [propertyId], references: [id])
  propertyId          String
  name                String
  households          Household[]
  leases              Lease[]
  utilityReadings     UtilityReading[]
  tickets             Ticket[]
  visits              Visit[]
  devices             Device[]
  certificates        Certificate[]
  sensorEvents        SensorEvent[]
  greenScores        GreenScore[]
  createdAt           DateTime         @default(now())
  imageUrl            String?
  virtualTourEmbedUrl String?
  virtualTourImages   String[]         @default([])
  deletedAt           DateTime?
}

enum CertificateType {
  gas_safety
  epc
  electrical_safety
}

model Certificate {
  id         String          @id @default(cuid())
  org        Organization    @relation(fields: [orgId], references: [id])
  orgId      String
  property   Property?       @relation(fields: [propertyId], references: [id])
  propertyId String?
  unit       Unit?           @relation(fields: [unitId], references: [id])
  unitId     String?
  type       CertificateType
  expiryDate DateTime
  fileUrl    String?
  createdAt  DateTime        @default(now())
}

enum DeviceType {
  lock
  thermostat
}

model Device {
  id         String       @id @default(cuid())
  org        Organization @relation(fields: [orgId], references: [id])
  orgId      String
  unit       Unit         @relation(fields: [unitId], references: [id])
  unitId     String
  type       DeviceType
  adapter    String
  externalId String
  name       String?
  metadata   Json?
  createdAt  DateTime     @default(now())
  deletedAt  DateTime?
}

model SensorEvent {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  unit      Unit         @relation(fields: [unitId], references: [id])
  unitId    String
  type      String
  value     Float?
  riskScore Int
  action    String
  createdAt DateTime     @default(now())
}

model Household {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  unit      Unit         @relation(fields: [unitId], references: [id])
  unitId    String
  members   Membership[] @relation("HouseholdMembers")
  leases    Lease[]
  createdAt DateTime     @default(now())
}

enum RentFrequency {
  weekly
  monthly
  yearly
}

enum LeaseStatus {
  draft
  active
  renewing
  ended
}

enum AmendmentStatus {
  proposed
  countered
  accepted
  rejected
  signed
}

enum ShareType {
  percentage
  fixed
}

model Lease {
  id                 String               @id @default(cuid())
  org                Organization         @relation(fields: [orgId], references: [id])
  orgId              String
  unit               Unit                 @relation(fields: [unitId], references: [id])
  unitId             String
  household          Household            @relation(fields: [householdId], references: [id])
  householdId        String
  startDate          DateTime
  endDate            DateTime?
  rentAmount         Float
  rentFrequency      RentFrequency
  depositAmount      Float?
  utilityAllowances  Json?
  autoRenew          Boolean              @default(false)
  breakClause        String?
  status             LeaseStatus          @default(draft)
  invoices           Invoice[]
  deposits           Deposit[]
  documents          Document[]           @relation("LeaseDocuments")
  amendments         LeaseAmendment[]
  notices            Notice[]
  ledgerEntries      LedgerEntry[]
  mandates           PaymentMandate[]
  shares             LeaseShare[]
  createdAt          DateTime             @default(now())
  SublettingApproval SublettingApproval[]
}

model LeaseShare {
  id           String       @id @default(cuid())
  org          Organization @relation(fields: [orgId], references: [id])
  orgId        String
  lease        Lease        @relation(fields: [leaseId], references: [id])
  leaseId      String
  membership   Membership   @relation(fields: [membershipId], references: [id])
  membershipId String
  type         ShareType
  value        Float
}

model LeaseAmendment {
  id         String          @id @default(cuid())
  org        Organization    @relation(fields: [orgId], references: [id])
  orgId      String
  lease      Lease           @relation(fields: [leaseId], references: [id])
  leaseId    String
  version    Int
  status     AmendmentStatus @default(proposed)
  content    Json?
  pdfUrl     String?
  redlineUrl String?
  createdAt  DateTime        @default(now())

  @@unique([leaseId, version])
}

model Invoice {
  id        String            @id @default(cuid())
  org       Organization      @relation(fields: [orgId], references: [id])
  orgId     String
  lease     Lease             @relation(fields: [leaseId], references: [id])
  leaseId   String
  subtotal  Float
  tax       Float
  amount    Float
  dueDate   DateTime
  payments  Payment[]
  lineItems InvoiceLineItem[]
  shares    InvoiceShare[]
  createdAt DateTime          @default(now())
  paidAt    DateTime?
}

model InvoiceShare {
  id           String       @id @default(cuid())
  org          Organization @relation(fields: [orgId], references: [id])
  orgId        String
  invoice      Invoice      @relation(fields: [invoiceId], references: [id])
  invoiceId    String
  membership   Membership   @relation(fields: [membershipId], references: [id])
  membershipId String
  amount       Float
}

model InvoiceLineItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  description String
  amount      Float
  taxRate     Float?
}

model Payment {
  id         String       @id @default(cuid())
  org        Organization @relation(fields: [orgId], references: [id])
  orgId      String
  invoice    Invoice      @relation(fields: [invoiceId], references: [id])
  invoiceId  String
  provider   String
  externalId String       @unique
  amount     Float
  paidAt     DateTime     @default(now())
}

model PaymentMandate {
  id         String       @id @default(cuid())
  org        Organization @relation(fields: [orgId], references: [id])
  orgId      String
  lease      Lease        @relation(fields: [leaseId], references: [id])
  leaseId    String
  provider   String
  externalId String
  active     Boolean      @default(true)
  createdAt  DateTime     @default(now())
}

model Ticket {
  id          String       @id @default(cuid())
  org         Organization @relation(fields: [orgId], references: [id])
  orgId       String
  unit        Unit         @relation(fields: [unitId], references: [id])
  unitId      String
  createdBy   Membership?  @relation(fields: [createdById], references: [id])
  createdById String?
  description String
  type        TicketType
  priority    TicketPriority
  status      TicketStatus   @default(open)
  category    TicketCategory? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  assignedTo   Membership?    @relation("TicketAssignedTo", fields: [assignedToId], references: [id])
  assignedToId String?
  assignmentStatus AssignmentStatus @default(pending)
  eta         DateTime?
  partsCost   Float?      @default(0)
  labourCost  Float?      @default(0)
  rating      Int?
  review      String?
  notes       TicketNote[]
  visits      Visit[]
  documents   Document[]   @relation("TicketDocuments")
  createdAt   DateTime     @default(now())
  Property    Property?    @relation(fields: [propertyId], references: [id])
  propertyId  String?
}

enum TicketType {
  maintenance
  support
  other
}

enum TicketPriority {
  low
  medium
  high
}

enum TicketStatus {
  open
  in_progress
  completed
}

enum AssignmentStatus {
  pending
  accepted
  declined
}

model TicketCategory {
  id       String       @id @default(cuid())
  org      Organization @relation(fields: [orgId], references: [id])
  orgId    String
  name     String
  slaHours Int
  tickets  Ticket[]
}

model TicketNote {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  ticket    Ticket       @relation(fields: [ticketId], references: [id])
  ticketId  String
  author    Membership?  @relation(fields: [authorId], references: [id])
  authorId  String?
  content   String
  internal  Boolean      @default(false)
  createdAt DateTime     @default(now())
}

model Visit {
  id          String       @id @default(cuid())
  org         Organization @relation(fields: [orgId], references: [id])
  orgId       String
  ticket      Ticket?      @relation(fields: [ticketId], references: [id])
  ticketId    String?
  property    Property?    @relation(fields: [propertyId], references: [id])
  propertyId  String?
  scheduledAt DateTime
  notes       String?
  type        VisitType
  outcome     VisitOutcome?
  followUpAt  DateTime?
  Unit        Unit?        @relation(fields: [unitId], references: [id])
  unitId      String?
}

enum VisitType {
  inspection
  engineer
}

enum VisitOutcome {
  completed
  no_show
  follow_up_required
}

model UtilityReading {
  id         String       @id @default(cuid())
  org        Organization @relation(fields: [orgId], references: [id])
  orgId      String
  unit       Unit         @relation(fields: [unitId], references: [id])
  unitId     String
  type       String
  reading    Float
  recordedAt DateTime     @default(now())
}

model GreenScore {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  unit      Unit         @relation(fields: [unitId], references: [id])
  unitId    String
  score     Float
  createdAt DateTime     @default(now())
}

model Deposit {
  id         String       @id @default(cuid())
  org        Organization @relation(fields: [orgId], references: [id])
  orgId      String
  lease      Lease        @relation(fields: [leaseId], references: [id])
  leaseId    String
  amount     Float
  receivedAt DateTime
  returnedAt DateTime?
  schemeRef       String?
  protectedAt     DateTime?
  deductionAmount Float?
  approved        Boolean     @default(false)
}

model Document {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  url       String
  lease     Lease?       @relation("LeaseDocuments", fields: [leaseId], references: [id])
  leaseId   String?
  ticket    Ticket?      @relation("TicketDocuments", fields: [ticketId], references: [id])
  ticketId  String?
  createdAt DateTime     @default(now())
}

model Notice {
  id             String       @id @default(cuid())
  org            Organization @relation(fields: [orgId], references: [id])
  orgId          String
  lease          Lease        @relation(fields: [leaseId], references: [id])
  leaseId        String
  type           String
  pdfUrl         String
  acknowledgedAt DateTime?
  createdAt      DateTime     @default(now())
}

model Notification {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  message   String
  read      Boolean      @default(false)
  createdAt DateTime     @default(now())
}

model ApiKey {
  id         String       @id @default(cuid())
  org        Organization @relation(fields: [orgId], references: [id])
  orgId      String
  key        String       @unique
  scopes     String[]
  quota      Int
  usage      Int          @default(0)
  createdAt  DateTime     @default(now())
  lastUsedAt DateTime?
}

model Plan {
  id        String        @id @default(cuid())
  org       Organization? @relation(fields: [orgId], references: [id])
  orgId     String?
  name      String
  createdAt DateTime      @default(now())
}

model FeatureFlag {
  id      String        @id @default(cuid())
  org     Organization? @relation(fields: [orgId], references: [id])
  orgId   String?
  name    String
  enabled Boolean       @default(false)
}

model AuditLog {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  actor     User?        @relation("ActorLogs", fields: [actorId], references: [id])
  actorId   String?
  action    String
  target    String?
  createdAt DateTime     @default(now())
}

model LedgerEntry {
  id            String       @id @default(cuid())
  org           Organization @relation(fields: [orgId], references: [id])
  orgId         String
  lease         Lease?       @relation(fields: [leaseId], references: [id])
  leaseId       String?
  date          DateTime     @default(now())
  description   String?
  debitAccount  String
  creditAccount String
  amount        Float
}

model SublettingApproval {
  id           String             @id @default(cuid())
  org          Organization       @relation(fields: [orgId], references: [id])
  orgId        String
  lease        Lease              @relation(fields: [leaseId], references: [id])
  leaseId      String
  revenueShare Float
  createdAt    DateTime           @default(now())
  payouts      SublettingPayout[]
}

model AirbnbIntegration {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  listingId String
  active    Boolean      @default(true)
  createdAt DateTime     @default(now())
}

model SublettingPayout {
  id          String             @id @default(cuid())
  org         Organization       @relation(fields: [orgId], references: [id])
  orgId       String
  approval    SublettingApproval @relation(fields: [approvalId], references: [id])
  approvalId  String
  amount      Float
  platformFee Float
  createdAt   DateTime           @default(now())
}

model TradespersonProfile {
  id           String        @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique
  categories   String[]
  coverageArea String
  hourlyRate   Float
  createdAt    DateTime      @default(now())
  jobs         ServiceJob[]
}

model ServiceJob {
  id             String              @id @default(cuid())
  org            Organization        @relation(fields: [orgId], references: [id])
  orgId          String
  tradesperson   TradespersonProfile @relation(fields: [tradespersonId], references: [id])
  tradespersonId String
  description    String
  price          Float
  platformFee    Float
  status         String              @default("pending")
  createdAt      DateTime            @default(now())
  completedAt    DateTime?
}
