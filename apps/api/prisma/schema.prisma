// Prisma schema defining tenancy application data model
// Business tables include orgId for organization scoping

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  landlord
  property_manager
  tenant
  tradesperson
  admin
}

model Organization {
  id             String           @id @default(cuid())
  name           String
  createdAt      DateTime         @default(now())
  memberships    Membership[]
  properties     Property[]
  apiKeys        ApiKey[]
  plans          Plan[]
  featureFlags   FeatureFlag[]
  auditLogs      AuditLog[]
  Unit           Unit[]
  Household      Household[]
  Lease          Lease[]
  Invoice        Invoice[]
  Payment        Payment[]
  Ticket         Ticket[]
  Visit          Visit[]
  UtilityReading UtilityReading[]
  Deposit        Deposit[]
  Document       Document[]
  Notification   Notification[]
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  totpSecret    String?
  totpEnabled   Boolean        @default(false)
  createdAt     DateTime       @default(now())
  memberships   Membership[]
  notifications Notification[]
  auditLogs     AuditLog[]     @relation("ActorLogs")
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Membership {
  id         String       @id @default(cuid())
  org        Organization @relation(fields: [orgId], references: [id])
  orgId      String
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  role       Role
  createdAt  DateTime     @default(now())
  households Household[]  @relation("HouseholdMembers")
  Ticket     Ticket[]
}

model Property {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  name      String
  address   String?
  units     Unit[]
  visits    Visit[]
  tickets   Ticket[]
  certificates Certificate[]
  createdAt DateTime     @default(now())
  imageUrl  String?
  deletedAt DateTime?
}

model Unit {
  id              String           @id @default(cuid())
  org             Organization     @relation(fields: [orgId], references: [id])
  orgId           String
  property        Property         @relation(fields: [propertyId], references: [id])
  propertyId      String
  name            String
  households      Household[]
  leases          Lease[]
  utilityReadings UtilityReading[]
  tickets         Ticket[]
  visits          Visit[]
  devices         Device[]
  certificates   Certificate[]
  createdAt       DateTime         @default(now())
  imageUrl        String?
  virtualTourEmbedUrl String?
  virtualTourImages  String[]      @default([])
  deletedAt       DateTime?
}

enum CertificateType {
  gas_safety
  epc
  electrical_safety
}

model Certificate {
  id         String           @id @default(cuid())
  org        Organization     @relation(fields: [orgId], references: [id])
  orgId      String
  property   Property?        @relation(fields: [propertyId], references: [id])
  propertyId String?
  unit       Unit?            @relation(fields: [unitId], references: [id])
  unitId     String?
  type       CertificateType
  expiryDate DateTime
  fileUrl    String?
  createdAt  DateTime         @default(now())
}

enum DeviceType {
  lock
  thermostat
}

model Device {
  id         String       @id @default(cuid())
  org        Organization @relation(fields: [orgId], references: [id])
  orgId      String
  unit       Unit         @relation(fields: [unitId], references: [id])
  unitId     String
  type       DeviceType
  adapter    String
  externalId String
  name       String?
  metadata   Json?
  createdAt  DateTime     @default(now())
  deletedAt  DateTime?
}

model Household {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  unit      Unit         @relation(fields: [unitId], references: [id])
  unitId    String
  members   Membership[] @relation("HouseholdMembers")
  leases    Lease[]
  createdAt DateTime     @default(now())
}

enum RentFrequency {
  weekly
  monthly
  yearly
}

enum LeaseStatus {
  draft
  active
  renewing
  ended
}

enum AmendmentStatus {
  proposed
  countered
  accepted
  rejected
  signed
}

model Lease {
  id          String       @id @default(cuid())
  org         Organization @relation(fields: [orgId], references: [id])
  orgId       String
  unit        Unit         @relation(fields: [unitId], references: [id])
  unitId      String
  household   Household    @relation(fields: [householdId], references: [id])
  householdId String
  startDate   DateTime
  endDate     DateTime?
  rentAmount  Float
  rentFrequency RentFrequency
  depositAmount Float?
  utilityAllowances Json?
  autoRenew   Boolean      @default(false)
  breakClause String?
  status      LeaseStatus  @default(draft)
  invoices    Invoice[]
  deposits    Deposit[]
  documents   Document[]   @relation("LeaseDocuments")
  amendments  LeaseAmendment[]
  createdAt   DateTime     @default(now())
}

model LeaseAmendment {
  id         String          @id @default(cuid())
  org        Organization    @relation(fields: [orgId], references: [id])
  orgId      String
  lease      Lease           @relation(fields: [leaseId], references: [id])
  leaseId    String
  version    Int
  status     AmendmentStatus @default(proposed)
  content    Json?
  pdfUrl     String?
  redlineUrl String?
  createdAt  DateTime        @default(now())

  @@unique([leaseId, version])
}

model Invoice {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  lease     Lease        @relation(fields: [leaseId], references: [id])
  leaseId   String
  subtotal  Float
  tax       Float
  amount    Float
  dueDate   DateTime
  payments  Payment[]
  lineItems InvoiceLineItem[]
  createdAt DateTime     @default(now())
}

model InvoiceLineItem {
  id          String   @id @default(cuid())
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  description String
  amount      Float
  taxRate     Float?
}

model Payment {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  invoice   Invoice      @relation(fields: [invoiceId], references: [id])
  invoiceId String
  amount    Float
  paidAt    DateTime     @default(now())
}

model Ticket {
  id          String       @id @default(cuid())
  org         Organization @relation(fields: [orgId], references: [id])
  orgId       String
  unit        Unit         @relation(fields: [unitId], references: [id])
  unitId      String
  createdBy   Membership?  @relation(fields: [createdById], references: [id])
  createdById String?
  description String
  status      String
  visits      Visit[]
  documents   Document[]   @relation("TicketDocuments")
  createdAt   DateTime     @default(now())
  Property    Property?    @relation(fields: [propertyId], references: [id])
  propertyId  String?
}

model Visit {
  id          String       @id @default(cuid())
  org         Organization @relation(fields: [orgId], references: [id])
  orgId       String
  ticket      Ticket?      @relation(fields: [ticketId], references: [id])
  ticketId    String?
  property    Property?    @relation(fields: [propertyId], references: [id])
  propertyId  String?
  scheduledAt DateTime
  notes       String?
  Unit        Unit?        @relation(fields: [unitId], references: [id])
  unitId      String?
}

model UtilityReading {
  id         String       @id @default(cuid())
  org        Organization @relation(fields: [orgId], references: [id])
  orgId      String
  unit       Unit         @relation(fields: [unitId], references: [id])
  unitId     String
  type       String
  reading    Float
  recordedAt DateTime     @default(now())
}

model Deposit {
  id         String       @id @default(cuid())
  org        Organization @relation(fields: [orgId], references: [id])
  orgId      String
  lease      Lease        @relation(fields: [leaseId], references: [id])
  leaseId    String
  amount     Float
  receivedAt DateTime
  returnedAt DateTime?
}

model Document {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  url       String
  lease     Lease?       @relation("LeaseDocuments", fields: [leaseId], references: [id])
  leaseId   String?
  ticket    Ticket?      @relation("TicketDocuments", fields: [ticketId], references: [id])
  ticketId  String?
  createdAt DateTime     @default(now())
}

model Notice {
  id            String       @id @default(cuid())
  org           Organization @relation(fields: [orgId], references: [id])
  orgId         String
  lease         Lease        @relation(fields: [leaseId], references: [id])
  leaseId       String
  type          String
  pdfUrl        String
  acknowledgedAt DateTime?
  createdAt     DateTime     @default(now())
}

model Notification {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  message   String
  read      Boolean      @default(false)
  createdAt DateTime     @default(now())
}

model ApiKey {
  id         String       @id @default(cuid())
  org        Organization @relation(fields: [orgId], references: [id])
  orgId      String
  key        String       @unique
  createdAt  DateTime     @default(now())
  lastUsedAt DateTime?
}

model Plan {
  id        String        @id @default(cuid())
  org       Organization? @relation(fields: [orgId], references: [id])
  orgId     String?
  name      String
  createdAt DateTime      @default(now())
}

model FeatureFlag {
  id      String        @id @default(cuid())
  org     Organization? @relation(fields: [orgId], references: [id])
  orgId   String?
  name    String
  enabled Boolean       @default(false)
}

model AuditLog {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  actor     User?        @relation("ActorLogs", fields: [actorId], references: [id])
  actorId   String?
  action    String
  target    String?
  createdAt DateTime     @default(now())
}
